<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>看前輩 Coding 學 Python (1) - next() &amp; filter() &amp; Lambda</title>
    <url>/2022/03/14/learning_python_from_mentor_1/</url>
    <content><![CDATA[<p>在現職公司正式待滿三個月，因為都在看前人的舊專案，發現不少自己一輩子都想不到的神操作，決定從這系列文章開始將這些神奇的 python 用法記錄下來和大家分享，望有天變成自己的 code。</p>
<h2 id="本章學習內容"><a href="#本章學習內容" class="headerlink" title="本章學習內容"></a>本章學習內容</h2><ul>
<li>壹、了解 next() &#x2F; filter() 使用方法</li>
<li>貳、了解 Lambda Function 使用方法</li>
</ul>
<h2 id="範例環境"><a href="#範例環境" class="headerlink" title="範例環境"></a>範例環境</h2><p>Python 3.9.1</p>
<h2 id="正文開始"><a href="#正文開始" class="headerlink" title="正文開始"></a>正文開始</h2><p>先來看下方這段程式碼，請問 x 會是什麼呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple_lst = [(<span class="number">50</span>, <span class="number">5</span>), (<span class="number">40</span>, <span class="number">4</span>), (<span class="number">30</span>, <span class="number">3</span>), (<span class="number">20</span>, <span class="number">2</span>), (<span class="number">10</span>, <span class="number">1</span>)]</span><br><span class="line">target = <span class="number">40</span></span><br><span class="line">_, x = <span class="built_in">next</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] &lt;= target, tuple_lst), (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<p>答不出來沒關係，我們來慢慢解析它們在做什麼！</p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p><strong>語法</strong>： <code>filter(function, iterable)</code><br><strong>參數</strong>：<br>    1. <code>function</code>：判斷函式。<br>    2. <code>iterable</code>：可迭代物件，例如 list, set, dict, string。</p>
<p>我們來看 <a class="link"   href="https://docs.python.org/3.9/library/functions.html#filter" >Python官方文件<i class="fas fa-external-link-alt"></i></a> 是怎麼介紹它的：</p>
<blockquote>
<p>filter(function, iterable) is equivalent to the generator expression (item for item in iterable if function(item)) if function is not None, and (item for item in iterable if item) if function is None.</p>
</blockquote>
<p>直接用 Code 來解釋：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greater_than_ten</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> num &gt; <span class="number">10</span></span><br><span class="line"></span><br><span class="line">iterable_item = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">ret = (item <span class="keyword">for</span> item <span class="keyword">in</span> iterable_item <span class="keyword">if</span> greater_than_ten(item)) <span class="comment"># generator object</span></span><br><span class="line">ret2 = <span class="built_in">filter</span>(greater_than_ten, iterable_item) <span class="comment"># filter object</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(ret) == <span class="built_in">list</span>(ret2)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(ret)) <span class="comment"># [11, 13]</span></span><br><span class="line"></span><br><span class="line">ret3 = (item <span class="keyword">for</span> item <span class="keyword">in</span> iterable_item)</span><br><span class="line">ret4 = <span class="built_in">filter</span>(<span class="literal">None</span>, iterable_item)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(ret3) == <span class="built_in">list</span>(ret4)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(ret3)) <span class="comment"># [7, 9, 11, 13]</span></span><br></pre></td></tr></table></figure>
<p>就如同文件的說明，當我們將 generator object 和 filter object，由於兩者是不同的物件，不能直接比較，將他們轉換為 list 後，兩者的結果是完全相同的。filter() 的使用方法，就是將判斷式放在第一個參數，迭代物件放在第二個參數，獲得篩選結果。</p>
<h3 id="我知道-filter-了，那裡面的-lambda-又是怎麼回事？"><a href="#我知道-filter-了，那裡面的-lambda-又是怎麼回事？" class="headerlink" title="我知道 filter() 了，那裡面的 lambda 又是怎麼回事？"></a>我知道 filter() 了，那裡面的 lambda 又是怎麼回事？</h3><p><strong>語法</strong>： <code>lambda parameters: expression</code><br><strong>參數</strong>：<br>    1. <code>parameters</code>：一個 ~ 多個參數。<br>    2. <code>expression</code>：可迭代物件，例如 list, set, dict, string。<br>一樣，我們來看 <a class="link"   href="https://docs.python.org/3/reference/expressions.html#lambda" >Python官方文件<i class="fas fa-external-link-alt"></i></a> 怎麼介紹 Lambda:</p>
<blockquote>
<p>Lambda expressions are used to create anonymous functions. …The unnamed object behaves like a function object defined with:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> &lt;<span class="keyword">lambda</span>&gt;(parameters):</span><br><span class="line">   <span class="keyword">return</span> expression</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Lambda 就是一個<strong>匿名函式</strong>，例如一個 Lambda 為：<code>lambda x: x &gt; 0</code>，它就等同於：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_func</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>Lambda 的好處就是小巧方便，不用另外建立一個 function 來特別呼叫它，缺點則是它不能實現太複雜的邏輯，你只能有一行運算式實現你的判斷。</p>
<h3 id="中場休息：了解-filter-和-Lambda-後，先來拆解最上面的例子："><a href="#中場休息：了解-filter-和-Lambda-後，先來拆解最上面的例子：" class="headerlink" title="中場休息：了解 filter() 和 Lambda 後，先來拆解最上面的例子："></a>中場休息：了解 filter() 和 Lambda 後，先來拆解最上面的例子：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple_lst = [(<span class="number">50</span>, <span class="number">5</span>), (<span class="number">40</span>, <span class="number">4</span>), (<span class="number">30</span>, <span class="number">3</span>), (<span class="number">20</span>, <span class="number">2</span>), (<span class="number">10</span>, <span class="number">1</span>)]</span><br><span class="line">target = <span class="number">40</span></span><br><span class="line">new_tuple_lst = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] &lt;= target, tuple_lst))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new_tuple_lst) <span class="comment"># [(40, 4), (30, 3), (20, 2), (10, 1)]</span></span><br></pre></td></tr></table></figure>
<p>由於 filter() 會依序迭代 <code>tuple_lst</code> 中的 <code>tuple</code> ，並對每個 <code>tuple</code> 中的第一個值進行 <code>&lt;=40</code> 的判斷，並將判斷為 <code>True</code> 的 <code>tuple</code> 進行回傳，於是 <code>new_tuple_lst</code> 的結果就會如上標註所述。</p>
<h3 id="最後，我們來了解什麼是-next"><a href="#最後，我們來了解什麼是-next" class="headerlink" title="最後，我們來了解什麼是 next()"></a>最後，我們來了解什麼是 next()</h3><p><strong>語法</strong>： <code>next(iterator[, default])</code><br><strong>參數</strong>：<br>    1. <code>iterator</code>： Python 定義的一種可迭代物件，和前面提及的 iterable 不同，有 <code>__next__()</code> 可以呼叫。<br>    2. <code>default</code>：當沒有元素可以再迭代時返回的固定值，使用者不一定要帶入此參數。</p>
<p><a class="link"   href="https://docs.python.org/3.9/library/functions.html#next" >Python官方文件<i class="fas fa-external-link-alt"></i></a>的解釋則如下：</p>
<blockquote>
<p>Retrieve the next item from the iterator by calling its <code>__next__()</code> method. If default is given, it is returned if the iterator is exhausted, otherwise StopIteration is raised.</p>
</blockquote>
<p>next() 就是調用 iterator 的 <code>__next__()</code> 方法，該方法會回傳 iteraotor 下一個要迭代的值，當 iterator 已經耗竭(沒有元素可以迭代時)，就會觸發名為 <code>StopIteration</code> 的 exception，若有設置 default 則可以返回 default，而不用觸發 exception 使程式停止執行。</p>
<p>next() 的實作邏輯如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">iterator, default=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> default:</span><br><span class="line">        <span class="keyword">return</span> iterator.__next__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> iterator.__next__()</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">return</span> default</span><br></pre></td></tr></table></figure>

<p>直接實作 next() 方法看看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iter_lst = <span class="built_in">iter</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># 將 list(iterable) 轉為 iterator</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(iter_lst)) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(iter_lst)) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(iter_lst)) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(iter_lst, <span class="number">0</span>)) <span class="comment"># 迭代耗竭，但有設 default，回傳 0</span></span><br><span class="line"><span class="comment"># print(next(iter_empty_lst)) # 迭代耗竭，沒有設 default，觸發 StopIteration</span></span><br></pre></td></tr></table></figure>

<h3 id="三個-Function-都學完後，回到題目："><a href="#三個-Function-都學完後，回到題目：" class="headerlink" title="三個 Function 都學完後，回到題目："></a>三個 Function 都學完後，回到題目：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple_lst = [(<span class="number">50</span>, <span class="number">5</span>), (<span class="number">40</span>, <span class="number">4</span>), (<span class="number">30</span>, <span class="number">3</span>), (<span class="number">20</span>, <span class="number">2</span>), (<span class="number">10</span>, <span class="number">1</span>)]</span><br><span class="line">target = <span class="number">40</span></span><br><span class="line">_, x = <span class="built_in">next</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] &lt;= target, tuple_lst), (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<p>我們已經知道，<code>filter(lambda x: x[0] &lt;= target, tuple_lst)</code> 這段會產生一個回傳後四組 <code>tuple</code> 的 filter object（它是一個 iterator），再經過 next()，並用 <code>x</code> 接收 <code>tuple</code> 的第二個值。不用將 <code>x</code> 印出來，我們也可以很篤定的說：「x &#x3D; 4」。</p>
<p>學完上述三個 Function 後，你可能會對文章中的三個名詞感到一些疑惑：generator, iterable, iterator，看起來都是可以迭代的物件，但好像又有些不同，它們之間又該怎麼分辨？下一篇文章，就會來仔細的探討它們的定義，敬請期待！！</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Built-in Functions</tag>
        <tag>Lambda</tag>
      </tags>
  </entry>
</search>
